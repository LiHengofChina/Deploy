//=====================
"Lvs的调度算法"决定了如何在"集群节点"之间分布工作负荷
当"director调度器"收到"来自客户端访问VIP"的上的集群服务的入站请求时
"director调度器"必须决定"哪个集群节点"应该处理请求。
//=====================
固定调度算法   rr  wrr  dh  sh 
动态调度算法   wlc lc lblc lblcr 
//=====================
rr  轮询算法，它将请求依次分配给不同的rs节点，也就是RS节点中均摊分配。
	这种算法简单，但只适合于RS节点处理性能差不多的情况

wrr 加权轮训调度，它将依据不同RS的权值分配任务。权值较高的RS将优先获得任务，
	并且分配到的连接数将比权值低的RS更多。相同权值的RS得到相同数目的连接数。
Dh  目的地址哈希调度（destination hashing）以目的地址为关键字查找一个静态hash表来获得需要的RS

SH 源地址哈希调度（source hashing）以源地址为关键字查找一个静态hash表来获得需要的RS
//=====================
Wlc 加权最小连接数调度，假设各台RS的全职依次为Wi，当前tcp连接数依次为Ti，
	依次去Ti/Wi为最小的RS作为下一个分配的RS

Lc 最小连接数调度（least-connection）,
	IPVS表存储了所有活动的连接。LB会比较将连接请求发送到当前连接最少的RS.

Lblc 基于地址的最小连接数调度（locality-based least-connection）：
	将来自同一个目的地址的请求分配给同一台RS，此时这台服务器是尚未满负荷的。
	否则就将这个请求分配给连接数最小的RS，并以它作为下一次分配的首先考虑。
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	