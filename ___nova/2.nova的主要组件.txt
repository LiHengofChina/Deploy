http://blog.51cto.com/wzlinux/1962230
//============================================= Nova主要组件
//============================================= Nova主要组件
	Nova由很多"子服务组成"
		//同时我们也知道OpenStack是一个分布式系统
		//对于 Nova 这些服务会部署在 两类节点上
		"计算节点和控制节点"
		1). 计算节点上安装了 Hypervisor 
			上面运行虚拟机
			只有 nova-compute 需要放在计算节点上，
		2). 其他子服务则是放在控制节点上的。	

	//============================主要组件
	//============================主要组件
	1).nova-api
			nova-api 服务作为 Nova 组件"对外的唯一窗口"
			//接收和响应用户的API请求，当客户需要执行虚机相关的操作，
			//能且只能向nova-api 发送 REST API 请求，
			这里的客户包括:
				1).终端用户
				2).命令行和
				3).openstack其他组件。
			nova-api服务支持
				OpenStack Compute API，
				Amazon EC2 API，
				Admin API
	2).nova-api-metadata	
	3).nova-compute	//计算节点
	4).nova-placement-api
	5).nova-scheduler	
	6).nova-conductor
	7).nova-cert 
	8).nova-consoleauth
	9).nova-novncproxy
	10).nova-spicehtml5proxy
	11).nova-xvpvncproxy
	12).The queue
	13).SQL database

//=============================================Nova各组件如何协调工作
//=============================================Nova各组件如何协调工作
	1). 客户（可以是OpenStack最终用户，也可以是其他程序）向API（nova-api）
		发送请求："帮我创建一个虚机"；
	2). API对请求做一些必要处理后，
		向Messaging（RabbitMQ）发送了一条消息："让Scheduler创建一个虚机"；
	3).	Scheduler（nova-scheduler）从Messaging获取到API发给它的消息，
		然后执行调度算法，
		从若干计算节点中选出节点 A ；
	4). Scheduler向Messaging发送了一条消息：
		"在计算节点 A 上创建这个虚机"
	5). 计算节点 A 的Compute（nova-compute）
		从Messaging中获取到Scheduler发给它的消息，
		然后在本节点的Hypervisor上启动虚机；
	6). 在虚机创建的过程中，Compute如果需要查询或更新数据库信息，
		会通过Messaging向Conductor（nova-conductor）发送消息，
		Conductor负责数据库访问。
		
http://blog.51cto.com/wzlinux/1962230








