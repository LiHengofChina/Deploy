http://blog.51cto.com/wzlinux/1962230
//============================================= Nova主要组件
//============================================= Nova主要组件
	Nova由很多"子服务组成"
		//同时我们也知道OpenStack是一个分布式系统
		//对于 "Nova的这些子服务" 会部署在 两类节点上
		"计算节点和控制节点"
		1). 计算节点
			1).安装 Hypervisor 管理程序
					//Hypervisor 泛指管理程序，管理虚拟机的管理程序
			2). 上面运行虚拟机	
					//PS:就是说创建的虚拟机和容器位于这种节点上面
			3). 只有nova-compute放在计算节点上
					//意思是nova-compute子服务会安装在上面
			
		2). 控制节点
			其他子服务则是放在控制节点上的
				

	//============================主要组件
	//============================主要组件
	1).nova-api
			nova-api 服务作为 Nova 组件"对外的唯一窗口"
			//接收和响应用户的API请求，当客户需要执行虚机相关的操作，
			//能且只能向nova-api 发送 REST API 请求，
			这里的客户包括:
				1).终端用户
				2).命令行和
				3).openstack其他组件。
			nova-api服务支持
				OpenStack Compute API，
				Amazon EC2 API，
				Admin API
	2).nova-api-metadata
			nova-api-metadata主要接收虚拟机的元数据请求，
			通常在带有nova-network的多主机模式下才会使用。
	3).nova-compute	//计算节点
			nova-compute在计算节点上运行，
			它是一个工作进程(worker deamon)	
			通过hypervisor APIs来创建或者关闭虚拟机实例，
			这个过程相当的复杂
			总的来说，它从队列服务接收消息之后，
			然后启动虚拟机并在数据库中更新状态。
	4).nova-placement-api
			主要追踪每个提供者的库存和使用量情况，
			比如追踪计算节点的资源，
			存储池的使用情况以及IP的分配情况等等。
	5).nova-scheduler	
			如果有多个实体都能够完成任务，
			那么通常会有一个scheduler负责从这些实体中挑选出一个最合适的来执行操作，
			nova-scheduler就是处理队列中的请求，
			然后会根据计算节点当时的资源使用情况
			选择一个最合适的计算节点来运行虚机，
			会通过消息中间件rabbitMQ向选定的计算节点发出launch instance的命令。	
	6).nova-conductor
			nova-compute需要获取和更新数据库中instance的信息，
			但nova-compute并不会直接访问数据库，
			而是通过nova-conductor实现数据的访问。
			//在巨大的集群中，nova-conductor可以水平扩展，
			//但是不要部署在计算节点上。
	7).nova-cert
			一个Nova的证书服务，提供 x509 证书支持，用于兼容AWS。
	8).nova-consoleauth
			负责对访问虚机控制台请亲提供Token认证。
	9).nova-novncproxy
	        提供基于Web浏览器的VNC访问
	10).nova-spicehtml5proxy
			提供基于HTML5浏览器的SPICE访问。
	11).nova-xvpvncproxy
			 提供基于Java客户端的VNC访问。
	12).The queue
			在前面我们了解到Nova包含众多的子服务，
			这些子服务之间需要相互协调和通信，为解耦各个子服务，
			Nova通过Message Queue作为子服务的信息中转站，
			所以在架构图上我们看到了子服务之间没有直接的连线，
			它们都通过Message Queue联系。
	13).SQL database
			Nova会存放一些云平台的状态数据在数据库中，
			比如可用虚拟机类型、虚拟机是否使用中、
			网络的使用状态以及项目等。

 









