Gradle学习系列之四――增量式构建
	//----------------------
	　如果我们将Gradle的Task看作一个黑盒子，
	  那么我们便可以抽象出输入和输出的概念，
	//----------------------
	  一个Task对输入进行操作，然后产生输出
	//----------------------
		比如，在使用java插件编译源代码时，
		//---
		输入即为Java源文件
		输出则为class文件。
	//----------------------
	多次执行一个Task时的输入和输出是一样的，
	那么我们便可以认为这样的Task是没有必要重复执行的
	//----------------------
	此时，反复执行相同的Task是冗余的，并且是耗时的。
	//----------------------
	为了解决这样的问题，Gradle引入了增量式构建的概念。
//----------------增量式构建的概念
		为每个Task定义输入（inputs）和输入（outputs）
		//----------
		如果在执行一个Task时，
		如果它的输入和输出与前一次执行时没有发生变化，
		那么Gradle便会认为该Task是最新的（UP-TO-DATE），
		因此Gradle将不予执行。
		//----------
		一个Task的inputs和outputs可以是一个或多个文件，
		可以是文件夹，
		还可以是Project的某个Property，
		甚至可以是某个闭包所定义的条件。
		//----------
		每个Task都拥有inputs和outputs属性，
		他们的类型分别为TaskInputs和TaskOutputs。
	//-----------------
		在实际应用中，
		你将遇到很多这样的情况，
		因为Gradle的很多插件都引入了增量式构建机制。
			
			
		
		
		
		
		
		
		
		
		
		
		
		
	