//=======================  
	//=============合法变量名
	foo_port 、foo5
	//=============非法变更名
	foo-port、foo port、foo.port、12
 
	//======================在playbook中定义变量
	- hosts: webservers
	  vars:
		http_port: 80		
	//======================在文件和role中定义变量 
	//======================定义变量
		tasks:
		  - include: wordpress.yml wp_user=timmy
		  - include: wordpress.yml wp_user=alice
		  - include: wordpress.yml wp_user=bob	
		//======================使用变量
			{{ wp_user }}
	//======================使用变量
	//示例1：
		My amp goes to {{ max_amp_value }}
	//示例2：		
		template: src=foo.cfg.j2 dest={{ remote_install_path }}/foo.cfg

 	
	//=======================YAML陷阱	 
	//=======================YAML陷阱	 
	//=======================YAML陷阱	 
		 YAML语法要求如果值以{{ foo }}开头的话
		 我们需要将整行用双引号包起来.
		 这是为了确认你不是想声明一个YAML字典.
		//======================错误做法
		- hosts: app_servers
		  vars:
			  app_path: {{ base_path }}/22	 
		//======================正确做法 
		 - hosts: app_servers
		  vars:
			   app_path: "{{ base_path }}/22"

//======================使用Facts获取的信息
//======================使用Facts获取的信息
//======================使用Facts获取的信息
		还有其它地方可以获取变量,
		这些变量是自动发现的,
		而不是用户自己设置的.	
		//================主要用于获取远程系统的数据,
		ansible hostname -m setup
			//这将返回巨量的变量数据
			//facts中的数据是由Ansible中的 
			//‘setup’模块自动发现的.
		//================使用这些变量的方式：
		{{ ansible_devices.sda.model }}		
		....
		//================
		你已经知道了你系统的一切,那么你可以关闭fact数据的获取.
		 - hosts: whatever
		  gather_facts: no
		//================ 本地Facts？？
		//================ Fact缓存？？ 
//======================注册变量		
//======================注册变量		
//======================注册变量		
//======================注册变量		
		意思是：在运行命令时,把命令结果存储到一个变量中.
	//=============示例：
	- hosts: web_servers

	  tasks:

		 - shell: /usr/bin/foo
		   register: foo_result		//
		   ignore_errors: True

		 - shell: /usr/bin/bar
		   when: foo_result.rc == 5
	//=============注册变量 的生命周期
	//=============注册变量 的生命周期
	//=============注册变量 的生命周期
	当前主机接下来playbook运行过程中注册的变量是有效地.
	这与Ansile中的 “facts” 生命周期一样. 
//======================访问复杂变量
//======================访问复杂变量
//======================访问复杂变量
//======================访问复杂变量
	//访问方式1
	{{ ansible_eth0["ipv4"]["address"] }}   
	//访问方式2
	{{ ansible_eth0.ipv4.address }}
	//访问数组第一个元素
	{{ foo[0] }}
//======================魔法变量	
//======================魔法变量	
//======================魔法变量	
//======================魔法变量	
//======================魔法变量	
	hostvars		访问其它主机的变
					//就是主机列表中，两个节点的变量互访使用
	group_names		//前主机所在所有群组的列表(数组)
					//使用Jinja2语法在模板中根据该主机
					//所在群组关系(或角色)来产生变化:
					{% if 'webserver' in group_names %}
					   # some part of a configuration file that only applies to webservers
					{% endif %}
	groups	
//======================变量文件分离，引入变量文件 
//======================变量文件分离，引入变量文件 
//======================变量文件分离，引入变量文件 
---

- hosts: all
  remote_user: root
  vars:
    favcolor: blue
  vars_files:
    - /vars/external_vars.yml

  tasks:

  - name: this is just a placeholder
    command: /bin/echo foo 
//======================命令行中变量传递 
//======================命令行中变量传递 
//======================命令行中变量传递 
//======================命令行中变量传递 

	ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo" 
	//=======================使用
	---

	- hosts: '{{ hosts }}'
	  remote_user: '{{ user }}'

	  tasks:
		 - ...	
	//=======================传递变量
	ansible-playbook release.yml --extra-vars "hosts=vipers user=starbuck"
	或
	--extra-vars '{"pacman":"mrs","ghosts":["inky","pinky","clyde","sue"]}'
	或
	--extra-vars "@some_file.json"
//=======================变量优先权
//=======================变量优先权
//=======================变量优先权
 
 
* extra vars (在命令行中使用 -e)优先级最高
* 然后是在inventory中定义的连接变量(比如ansible_ssh_user)
* 接着是大多数的其它变量(命令行转换,play中的变量,included的变量,role中的变量等)
* 然后是在inventory定义的其它变量
* 然后是由系统发现的facts
* 然后是 "role默认变量", 这个是最默认的值,很容易丧失优先权 
 
 
 
 
 