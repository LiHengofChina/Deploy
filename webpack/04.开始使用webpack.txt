 1). 创建一个package.json文件
	//这是一个标准的npm说明文件
	//当前项目的依赖模块，自定义的脚本任务等等
	//使用npm init命令可以自动创建这个package.json文件
	npm init
	//直接回车即可

2). 安装webpack
	//全局安装
	npm install -g webpack
	
			//安装到你的项目目录
			//npm install --save-dev webpack

	//安装cli
	npm install webpack-cli -g
	
	
3). 创建两个文件夹,
	app	   //存放原始数据和我们将写的JavaScript模块
	public //用来存放之后供浏览器读取的文件
		   //（包括使用webpack打包生成的js文件
		   //以及一个index.html文件） 

4). 新建三个文件
	index.html 	-- 放在public文件夹中
			//在index.html文件中写入最基础的html代码
			//它在这里目的在于引入打包后的js文件(名为：bundle.js)
	Greeter.js	-- 放在app文件夹中
	main.js		-- 放在app文件夹中


4). 填写文件信息：
	.....

5).终端中使用 webpack，意思是使用webpack命令打包，
	//node_modules/.bin/webpack app/main.js public/bundle.js
	webpack app/main.js -o public/bundle.js
	
	//打包成功
	
	
6).通过配置文件方式使用
	
	//新建立： webpack.config.js  文件

	//“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。

	//打包
	webpack //自动找到 webpack.config.js 配置文件
		
	
7).使用npm命令引导任务执行

在package.json中对scripts对象进行相关设置

 "scripts": {
    "start": "webpack"  //这里不能有注释
 }

npm start  		//start 名字特殊， 	//开始打包
npm run build  //其它的必须要加run //开始打包

	 
8). Source Maps	//方便调试用的
					//仅开发阶段使用它//会生成 .map文件

	配置生成 Source Maps
		//提供了一种对应编译文件和源文件的方法，
		//使得编译后的代码可读性更高，也更容易调试。

		//意思是：给打包后的文件生成原文件嘛，因为打包在一起不方便查看
		
  devtool: 'source-map',

(9) 使用webpack构建本地服务器

	Webpack提供一个可选的本地开发服务器
	这个本地服务器基于node.js构建
	它是一个单独的组件

	//局部安装
	npm install --save-dev webpack
	npm install --save-dev webpack-cli			
	npm install --save-dev webpack-dev-server
	
    devServer: {
		contentBase: "./public",//本地服务器所加载的页面所在的目录
		historyApiFallback: true,//不跳转
		inline: true//实时刷新
    }
	 
	"server": "webpack-dev-server --open"
	
	npm run server chrome

//==============================


从这里开始 2019年12月4日22:7:42

https://segmentfault.com/a/1190000006178770

https://www.webpackjs.com/

webpack_demo






 