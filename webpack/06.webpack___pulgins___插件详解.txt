
//================================================ 插件
//================================================ 插件

	插件（Plugins）是用来拓展 Webpack 功能的，
	它们会在整个构建过程中生效，执行相关的任务。
		
		//Webpack有很多内置插件，同时也有很多第三方插件

//================================================ Loaders 和 Plugins 的区别	
//================================================ Loaders 和 Plugins 的区别	
	不要混淆 插件 和 Loaders

	1). Loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个。
		
	2).	插件并不直接操作单个文件，它直接对整个构建过程起作用。
	
		
 
//================================================ 常见插件（一）
//================================================ 常见插件（一）

1). HtmlWebpackPlugin
	//依据一个简单的index.html模板
	//生成一个"自动引用你打包后JS文件"的新index.html
	//这在每次生成的js文件名称不同时非常有用（比如添加了hash值）。
2). 插件安装
	npm install --save-dev html-webpack-plugin

3). 产生插件实例
	const HtmlWebpackPlugin = require('html-webpack-plugin');
	
	plugins: [
            new HtmlWebpackPlugin({
                template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数
            })
	]							
 
//================================================ 常见插件（二）热部署
//================================================ 常见插件（二）热部署

Hot Module Replacement
	它允许你在修改组件代码后，自动刷新实时预览修改后的效果。
	//一句话，时时部署,看到最新修改
	1).
		devServer: {
			......
			hot: true 
			......
		},
	2).
		const webpack = require('webpack');
		plugins: [
			new webpack.HotModuleReplacementPlugin()//热加载插件
		]

	3).
		npm install --save-dev babel-plugin-react-transform
		npm install --save-dev react-transform-hmr



//================================================ 常见插件（二）热部署2
//================================================ 常见插件（二）热部署2

这两个插件一般配置使用，
npm install --save-dev webpack-dev-middleware
npm install --save-dev webpack-hot-middleware


const webpackDevMiddleware = require("webpack-dev-middleware");
const webpackHotMiddleware = require('webpack-hot-middleware');


//const express = require("express"); 		//express中使用方式
//app.use(webpackHotMiddleware(compiler));	//express中使用方式



//================================================ 常见插件（三） OccurenceOrder 和 UglifyJS plugins
//================================================ 常见插件（三） OccurenceOrder 和 UglifyJS plugins
	
	OccurenceOrderPlugin : (内置)//为组件分配ID，
						   //通过这个插件webpack可以分析和优先考虑使用最多的模块，
						   //并为它们分配最小的ID
	UglifyJsPlugin：   	   //压缩JS代码；
	1).
		npm install --save-dev uglifyjs-webpack-plugin
	2).	
		const UglifyJsPlugin = require('uglifyjs-webpack-plugin');

	3).
		new webpack.optimize.OccurrenceOrderPlugin(),
		new UglifyJsPlugin({
			uglifyOptions: {
				compress: false
			}
		})

//================================================ 常见插件（四）清理插件
//================================================ 常见插件（四）清理插件

1). 安装 
     cnpm install clean-webpack-plugin --save-dev
 
 
2). 产生对象

	const {CleanWebpackPlugin} = require('clean-webpack-plugin');	//解构的方式
	new CleanWebpackPlugin()


				

//================================================ 常见插件（五）css提取插件
//================================================ 常见插件（五）css提取插件

1).   npm install --save-dev mini-css-extract-plugin

2). 
	  const MiniCssExtractPlugin = require("mini-css-extract-plugin");

3).
	 {
		  test: /\.css$/,
		  use: [
				MiniCssExtractPlugin.loader,
				"css-loader"
			]
	 }
4).

	new MiniCssExtractPlugin({
		filename: "[name].css",
		chunkFilename: "[id].css"
	}),  

//===================================================== 常见插件（六）合并插件  webpack-merge	//TODO 未测试
//===================================================== 常见插件（六）合并插件  webpack-merge //TODO 未测试

const webpackMerge = require('webpack-merge');
const commonConfig = require('./webpack.common.js'); 

module.exports = function (options) {
    return webpackMerge(
		commonConfig({ env: ENV }), //第一部分
		{//第二部分
			entry: {
				businessAll: ***.js,
				business_themes: [***.js]
			},
			mode: 'development',
			devtool: 'inline-source-map',
			output: {},
			plugins: []
		}
	);
}

//===================================================== 常见插件（七）复制 插件   //TODO 未测试
//===================================================== 常见插件（七）复制 插件   //TODO 未测试
npm install --save-dev copy-webpack-plugin
const CopyWebpackPlugin = require('copy-webpack-plugin')
new CopyWebpackPlugin([
  {
    from: path.resolve(__dirname, 'static'),
    to: path.resolve(__dirname, 'pages/static'),
    ignore: ['.*']
  }
])



