http://www.runoob.com/docker/docker-tutorial.html

//================================什么是Docker?
//================================什么是Docker?
//================================什么是Docker?
	Docker 是一个开源的应用容器引擎
	基于 Go 语言 并遵从Apache2.0协议开源
	//================================
	Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、
	可移植的容器中，然后发布到任何流行的 Linux 机器上，
	//================================
	容器是完全使用沙箱机制，
	相互之间不会有任何接口（类似 iPhone 的 app）,
	更重要的是容器性能开销极低。
//================================适用场景	
//================================适用场景	
//================================适用场景	
	1).web应用的自动化打包和发布；
	2).自动化测试和持续集成、发布；
	3).在服务型环境中部署和调整数据库或其他的后台应用；
	4).从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。
//================================Docker 架构
//================================Docker 架构
//================================Docker 架构
	ocker 使用客户端-服务器 (C/S) 架构模式，
	//使用远程API来管理和创建Docker容器。
	//===========================它包括两部分
	1).docker服务端
	2).docker客户端
//================================相关概念 
//================================相关概念 
//================================相关概念 
 
1).Docker 镜像(Images) :Docker 镜像是用于创建 Docker 容器的模板。	
2).Docker 容器(Container) :容器是独立运行的一个或一组应用。	
3).Docker 客户端(Client)
4).Docker 客户端通过
	命令行
	或者
	其他工具使用 Docker API 
		// (https://docs.docker.com/reference/api/docker_remote_api) 
	与 Docker 的守护进程通信。		
5).Docker 主机(Host):一个物理或者虚拟的机器用于执行 Docker 守护进程和容器		
6).Docker 仓库(Registry):Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。
7).Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。		
8).Docker Machine:Docker Machine是一个简化Docker安装的命令行工具，
	通过一个简单的命令行即可在相应的平台上安装Docker，
	比如VirtualBox、 Digital Ocean、Microsoft Azure。	
		
	
	
	
	
	
	
	
	
	
	