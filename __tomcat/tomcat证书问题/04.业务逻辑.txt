
		https://www.cnblogs.com/got-my-way/p/4110394.html
		https://blog.csdn.net/zmken497300/article/details/53186730
		
//===========================================1:什么是HTTPS？
//===========================================1:什么是HTTPS？
	HTTPS其实是有两部分组成：HTTP + SSL / TLS，
	也就是在HTTP上又加了一层处理加密信息的模块，
	并且会进行身份的验证。
	//================问题
		Firebug和postman之类的浏览器调试工具，为什么获取到的是明文？
		SSL是对传输的数据进行加密，针对的是传输过程的安全。 
		firebug之类的浏览器调试工具，
	//================答案
		因为他们得到的是客户端加密之前/解密之后的数据，
		因此是明文的。
//===========================================2:什么是自签名证书？
//===========================================2:什么是自签名证书？
	
	就是自己生成的证书，并不是官方生成的证书。
		//就是自己在自己的服务器，
		//或者在自己电脑上生成的证书
//===========================================第一步：为服务器生成证书 
//===========================================第一步：为服务器生成证书 
1).服务器端生成证书(私钥)
	keytool -genkey -alias tomcat -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore c:/keys/tomcat.keystore -storepass 123456	
	
  
	
2). 生成客户端证书(私钥)
	keytool -genkey -alias client -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore c:/keys/client.p12 -storepass 123456 -storetype PKCS12
	
3). 导出客户端证书(也就是客户端的公钥)	
	keytool -export -alias client -keystore C:/keys/client.p12 -storetype PKCS12 -keypass 123456 -file C:/keys/client.cer

4). 把客户端的公钥导入到服务器的证书库，添加为一个信任证书：
	keytool -import -v -file c:/keys/client.cer -keystore c:/keys/tomcat.keystore -storepass 123456

	//通过list命令查看服务器的证书库：可以看到两个证书，一个是服务器证书，一个是受信任的客户端证书：
	keytool -list -v -keystore C:/keys/tomcat.keystore

5).配置tomcat 的SSL连接器
 
	<Connector
	
	port="8443"
		protocol="org.apache.coyote.http11.Http11NioProtocol"
		SSLEnabled="true"
		maxThreads="150"
		scheme="https"
		secure="true"
		sslProtocol="TLS"
		
	clientAuth="true"	 
	keystoreFile="c:/keys/tomcat.keystore"
	keystorePass="123456"

	truststoreFile="c:/keys/tomcat.keystore"
	truststorePass="123456"
	
	/>		
	
	/**
		设置clientAuth属性为True时
		需要手动导入客户端证书才能访问	
		即安装：client1.p12 文件(客户端的私钥)
		即客户端用这个私钥对数据进行加密
		服务器端才能用对应的公钥对数据进行解密，
		才能访问成功。
	*/	

6).强制HTTPS访问	
 
  <security-constraint>
        <web-resource-collection>
            <web-resource-name>SSL</web-resource-name>
            <url-pattern>/*</url-pattern><!-- 全站使用SSL -->
        </web-resource-collection>
        <user-data-constraint>
            <description>SSL required</description>
            <!-- CONFIDENTIAL: 确保传输数据不被修改，不能被查看 -->
            <!-- INTEGRAL: 确保传输数据不被修改 -->
            <!-- NONE: 不做特殊限制-->
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>	




