https://blog.csdn.net/hhp_hhp/article/details/48706893
//======================================================================================== package分析 
//======================================================================================== package分析 
//======================================================================================== package分析 
 

murano package 中包含
	1). Classes、Resources、UI三个文件夹
	2). manifest.yaml、logo.png两个文件，
	3). 其中manifest.yaml是必须包含的文件。
	//===========
	drwxr-xr-x 2 root root    34 Jul 26 14:55 Classes
	-rw-r--r-- 1 root root 33332 May  8  2015 logo.png
	-rw-r--r-- 1 root root  1273 Apr 18  2017 manifest.yaml
	drwxr-xr-x 3 root root    48 Apr 12  2017 Resources
	drwxr-xr-x 2 root root    20 Jul 26 14:57 UI

	[root@localhost Apache]# tree
	.
	├── Classes
	│   └── ApacheHttpServer.yaml
	├── logo.png
	├── manifest.yaml
	├── Resources
	│   ├── DeployApache.template
	│   └── scripts
	│       └── runApacheDeploy.sh
	└── UI
		└── ui.yaml

 
//======================================================================================== manifest.yaml解析
//======================================================================================== manifest.yaml解析
//======================================================================================== manifest.yaml解析
 
	manifest.yaml 包含的如下几个部分
	//========================================
	//========================================
	Format: 		package 版本标记
	Type: 			package 类型。 目前只有两种类型：Library 和 Application
							1). Library是一个库，不能用来部署
								 //它主要包涵一些公共的属性和方法
								 //用于被Application继承和使用
								 //Murano平台提供了很多library可以直接使用
							2).	Application才是可以直接使用的包
							
	FullName: 		package 名称，通常在定义 Library 时使用		//描述Package的基本属性
	Name: 			package 名称，这个名称是一个人性化可读名称	//描述Package的基本属性
	Description: 	关于这个 package 的一段儿精简描述			//描述Package的基本属性
	
	Require:		表示 package 之间的依赖
	Author: 		package 的作者，可以是个人或者公司名称
	Classes: 		MuranoPL class 列表，定义应用会用到的方法
	Tags: 			可以说是关于这个 package 的关键字吧，为可选项
	Logo: 			package logo  名称，默认为 logo.png ，可选项
	//========================================示例：默认基础库io.murano的manifest.yaml
	//========================================示例：默认基础库io.murano的manifest.yaml
	Format: 1.0
	Type: Library
	FullName: io.murano
	Name: Core library
	Description: |
	  Core MuranoPL library
	Classes:
	  io.murano.Object: Object.yaml
	  io.murano.Environment: Environment.yaml
	  io.murano.StackTrace: StackTrace.yaml
	  io.murano.SharedIp: SharedIp.yaml
	  io.murano.File: File.yaml

	/**
		注： Classes仅截出一部分作为示例。
		根据上面的描述，我们可以这么理解，
		这个库版本是1.0，记作io.murano，
		包含有io.murano.Object等Classes，
		io.murano.Object 在Classes/Object.yaml中定义的。		
	*/	
//======================================================================================== Class定义
//======================================================================================== Class定义
//======================================================================================== Class定义
	
	manifest.yaml中的 Classes 定义了对应的 yaml 文件，
	这个文件主要存放在 Classes 目录下
	
	
	Class 包含如下几个部分，
	这个和java中定义一个类的形式是一样的，
	只不过没有没有接口等概念而已。
	//========================================
	//========================================
	Namespaces: 		命名空间，这个可以将一些引用的package缩写，
						//使"长类名称"更短
						/**
						示例说明：
							namespace中定义  –> std: io.murano 
							则在后面中的引用 –> std:Application 相当于是io.murano.Application
						*/
	Name: 				Class名，完整的class名由 namespace 中 =项 加上name拼接而成
	Extends: 			父Class，即继承的父Class
						// 本上都是继承的io.murano.Application
	Properties: 		参数，包含如下几个项
						// 名称: – 参数名称 
						// 声名类型：
							//https://muranotest.readthedocs.io/en/latest/articles/murano_pl.html#contract
						/**
							$.int()    				//整形
							$.string() 				//字符串
							$.string().notNull()    //非空字符串
							$.bool()   				//布尔类型（true/false） 0会被转为false，其他转为true
							$.class(ns:ClassName) 	//类
							$.class(ns:ClassName).notNull()    //非空类
						*/
						
						
					Contract: 			参数限制
					Usage: 				什么时候使用，声明作用域，包括如下 
										/**
										In 输入参数，该参数只能通过UI设置，
										   不能在MuranoPL代码里面修改。这是类属性的默认类型。 
										Out 输出参数，该参数只能在MuranoPL代码里面修改，
											不能通过UI设置。 
										InOut 既能由UI设置，
											  又能在MuranoPL代码修改的参数。 
											  
										Const 和In类似，不同的是只能被用户设置一次。 
										Runtime 和Out类似，不同的是不会被序列化。 	  

										*/
					Default: 			默认值
					
	Workflow/Methods: 	可提供调用的方法
			(1).Methods  声明的方法及实现
				默认必须包含的方法： 
					initialize: 初始化方法,主要是获取依赖的环境信息 
					deploy: 应用部署的主方法
					
					
					
	Argumentes: 		参数
	Body: 				方法执行步骤定义，body由多条Express组成
	//========================================示例：guacamole应用的Class定义
	//========================================示例：guacamole应用的Class定义
	Namespaces:
	  =: io.murano.apps
	  std: io.murano
	  sys: io.murano.system
	  srv: io.murano.apps.apache

	Name: Guacamole

	Extends: std:Application

	Properties:
	  name:
		Contract: $.string().notNull()
	  username:
		Contract: $.string().notNull()
	  password:
		Contract: $.string().notNull()
	  server:
		Contract: $.class(srv:Tomcat).notNull()

	Methods:
	  initialize:
		Body:
		  - $._environment: $.find(std:Environment).require()

	  deploy:
		Body:
		  - If: not $.getAttr(deployed, false)
			Then:
			  # Deploy Tomcat
			  - $._environment.reporter.report($this, 'Ensuring Tomcat is deployed')
			  - $.server.deploy()
			  # Deploy Guacamole
			  - $._environment.reporter.report($this, 'Deploying Guacamole')
			  - $resources: new(sys:Resources)
			  - $template: $resources.yaml('DeployGuacamole.template').bind(dict(
					username => $.username,
					password => $.password
				 ))
			  - $.server.instance.agent.call($template, $resources)
			  - If: $.server.instance.assignFloatingIp
				Then:
				  - $address: $.server.instance.floatingIpAddress
				Else:
				  - $address: $.server.instance.ipAddresses[0]
			  - $._environment.reporter.report($this, 'Guacamole {0} is available at http://{1}:{2}/guacamole'.format($.name, $address, 8080))
			  - $.setAttr(deployed, true)
	/**
	说明:
		定义名称为 Guacamole
		命名空间是 io.murano.apps
				所以该Class的标示为 io.murano.apps.Guacamole
		
		该Class继承于 io.murano.Application
		
		包含参数	name	username	password	server
				其中server为一个Class实例，
				为 io.murano.apps.apache.Tomcat 实例，且不能为空。
		
		提供了构造初始化方法和deploy方法。
				
			deploy 方法定义如下： 
			如果Class实例未部署（ deployed 为false），
				1). 第一步输出部署过程Ensuring Tomcat is deployed，
						接着调用server实例的deploy方法部署tomcat；
				2). 第二步，输出部署过程 Deploy Guacamole，
						接着新建实例传递部署模版
						DeployGuacamole.template 到 server 的 agent 中，
						交给agent实现部署，完成之后，
				3). 如果需要绑定 floatingIP ，
					绑定设置地址为 floatingIp 
					否则设置为server的第一个地址，
				4). 最后输出结果 Guacamole {0} is available at http://address:8080/guacamole
					并设置 deployed 为 true

	
	*/	
//======================================================================================== Resource定义	
//======================================================================================== Resource定义	
//======================================================================================== Resource定义	
	Resource主要是一些执行的脚本和部署模版
	提供给Class执行方法中调用
	部署模版格式如下：	

		FormatVersion:  		语法版本
		Version: 		 	版本
		Name: 				执行任务的名称
		Parameters:  		参数
		Body: 			执行返回，以|开头，换行return Expression
		Scripts:  			执行任务的主题，执行方法项中包含如下几项：
		Type: 				部署平台的类型，为Application
		Version: 			部署模版最小版本，可选
		EntryPoint: 		执行文件路径
		Files:  			需要的文件.
		Options: 			可选输出项，captureStdout，captureStderr
	//========================================示例：guacamole部署模版：
	//========================================示例：guacamole部署模版：
		FormatVersion: 2.0.0
		Version: 1.0.0
		Name: Deploy Guacamole

		Parameters:
		  username: $username
		  password: $password

		Body: |
		  return deploy('{0} {1}'.format(args.username, args.password)).stdout

		Scripts:
		  deploy:
			Type: Application
			Version: 1.0.0
			EntryPoint: deployGuacamole.sh
			Files: []
			Options:
			  captureStdout: true
			  captureStderr: true
//======================================================================================== UI 定义	
//======================================================================================== UI 定义	
//======================================================================================== UI 定义	
	
		UI定义结构如下
	
		Version: 		语法版本，可选
		Templates: 		辅助项，和Application一同工作，可选
		Application: 	部署需要用到的项，传递的是自定义的应用参数
		Forms: 			Web前端显示定义，form中项格式为： 
		name: 			字段名称
		label: 			字段页面上显示的名称
		description: 	描述，用上>-来保证格式
		type: 			字段类型
		string: 		Django 字符串类型
		boolean: 		Django 布尔类型
		text: 			Django 文本类型
		integer: 		Django 数字类型
		password: 		秘密类型
		clusterip: 		集群IP
		floatingip: 	外网Ip
		domain: 		域名
		databaselist: 	
		table: 			表格
		flavor: 		规格
		keypair: 		密钥对
		image: 			镜像
		azone: 			availability zoom
		psqlDatabase: 	显示PostgreSQL databases字段
		imageType: 		仅为镜像提供的属性

		//======================================== guacamole显示的UI为例分析：
		//======================================== guacamole显示的UI为例分析：
		Version: 2

		Application:
		  ?:
			type: io.murano.apps.Guacamole
		  name: $.appConfiguration.name
		  username: $.appConfiguration.username
		  password: $.appConfiguration.password
		  server: $.appConfiguration.server

		Forms:
		  - appConfiguration:
			  fields:
				- name: license
				  type: string
				  description: Apache License, Version 2.0
				  hidden: true
				  required: false
				- name: name
				  type: string
				  label: Application Name
				  initial: Guacamole
				  description: >-
					Enter a desired name for the application. Just A-Z, a-z, 0-9, dash and
					underline are allowed
				- name: username
				  type: string
				  label: Username
				  initial: guac
				  description: >-
					Please, provide a username that is going to be used to access Guacamole and ssh into the server instance to
					modify the Guacamole configuration
				- name: password
				  type: password
				  label: Password
				  descriptionTitle: Password
				  description: >-
					Please, provide a strong password that is going to be used to access Guacamole and ssh into the server instance to
					modify the Guacamole configuration
				- name: server
				  type: io.murano.apps.apache.Tomcat
				  label: Application Server
				  description: >-
					Select an instance of Application Server to run the app
		/**
			定义了UI显示的字段 
				license 
				name
				username
				password
				server
			其中server定义的是一个应用tomcat，
			也就是说依赖一个新的应用。 
			最终供部署使用的参数为 name		username	password	server	
		*/
//======================================================================================== 总结	
//======================================================================================== 总结	
//======================================================================================== 总结	
 

	结构非常的清新，引入了 yaql （https://github.com/ativelkov/yaql），
	充分利用了yaml、yaql的特性
	很好的解决了应用依赖定义的问题
	提供Library package定义，很好的体现了封装的思想
	提供Class 继承方法
	提供package和Class的命名规范

 
