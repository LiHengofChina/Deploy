
//========================================  方式二 使用插件
//========================================  方式二 使用插件

	为了处理这一种情况的出现，
	在构建maven项目的时候，
	我习惯性第一步就是配置 maven-compiler-plugin 插件。

	所以它是一个协助编译的插件
	  <build>
		<plugins>
		
			<!--  maven-compiler-plugin 插件版本	 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					  <source>1.8</source> 			<!-- 源代码使用的开发版本 -->
					  <target>1.8</target> 			<!-- 需要生成的目标class文件的编译版本 -->
					  <encoding>${sourceEncoding}</encoding> 	<!-- 源代码使用的编码方式 -->
					  <!--	<encoding>UTF-8</encoding> 	 源代码使用的编码方式 		-->

					
					
					  <showWarnings>true</showWarnings> 
					  
					  
					  <meminitial>128m</meminitial> <!-- 编译器使用的初始内存 -->  
					  <maxmem>512m</maxmem>	<!-- 编译器使用的最大内存 -->  
					  <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
				 
				 
					  <skipTests>true</skipTests><!-- 跳过测试 -->            
					  
					  
					  <compilerVersion>1.8</compilerVersion><!-- 指定插件将使用的编译器的版本 -->
					  <fork>true</fork><!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->       
					
					  <executable><!-- path-to-javac --></executable><!-- 使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> --> 
					
					
					  <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
					  <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>
				  
				</configuration>
				
			</plugin>
	 
			
			
		</plugins>
	  </build>

	  
	  
	  