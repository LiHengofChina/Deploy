
//=========================================
//=========================================

	<packaging>pom</packaging>
	<packaging>jar</packaging>
	<packaging>war</packaging>


//========================================= (1). 取pom
//========================================= (1). 取pom
	1. <packaging>pom</packaging>
		在"父级项目"中的"pom.xml文件"使用的
		packaging配置一定为"pom"
	
		//父级的pom文件只作项目的子模块的整合，
		//在maven install时不会生成jar/war压缩包。
	

//========================================= (2). 取jar //默认
//========================================= (2). 取jar //默认

	2. <packaging>jar</packaging>
		当pom文件中没有设置packaging参数时，默认使用jar方式打包。
	
		意味着在 maven build 时会将这个项目中的
		所有 java文件 都进行编译形成 .class 文件，
		且按照原来的java文件层级结构放置，
		最终压缩为一个jar文件。
		
//========================================= (3). 取war
//========================================= (3). 取war

	3. <packaging>war</packaging>
		
		war包与jar包非常相似，
		
		不同的是，它会将"项目中依赖的所有jar包"
		都放在  "WEB-INF/lib"  这个文件夹下
		
		WEB-INF/classes文件夹仍然放置我们自己代码的编译后形成的内容。
		
		可想而知，war包非常适合部署时使用，不再需要下载其他的依赖包，

		能够使用户拿到war包直接使用，
		因此它经常使用于微服务项目群中的入口项目的pom配置中。
		
		
		
//========================================= 总结
//========================================= 总结
		
			packaging中有3种不同的配置参数，
			它们各司其职、拥有差异的特性，
			给java web的构建与部署带来许多便利。


	